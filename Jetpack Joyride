from cmu_graphics import *
import math,copy
#from PIL import Image
#import os, pathlib

##scaffolding for game function
def onAppStart(app):
    app.BestDistance=0
    app.distance=0
    app.totalCoins=0
    app.gameOver=False
    app.inMenus=True
    #app.menuScreen=image
    app.inShop=False
    #app.shopScreen=image
    app.inGadgetShop=False
    #app.gadgetScreen=image
    app.inJetpackSkinShop=False
    #app.jetpackSkinScreen=image
    app.playing=False
    #app.playingScreen=image
    app.stepsPerSecond=1
    app.width=800
    app.height=400
    app.boardWidth=1200
    app.boardHeight=360
    app.rows=app.boardHeight//20
    app.cols=app.boardWidth//20
    app.boardLeft=0
    app.boardTop=20
    app.cellBorderWidth=2
    app.board=[([None]*app.cols) for row in range(app.rows)]
    app.steps=0
    #zapperList=[]

def onMousePress(app,mouseX,mouseY):
    if app.inMenus==True:
        pass
        #if mouse is within shopIcon
            #app.inMenus=False
            #app.inShop=True
        #elif mouse is within playGameIcon
            #app.inMenus=False
            #app.playing=True
    elif app.inShop==True:
        pass
        #if mouse is withing gadgetShopIcon
            #app.inShop=False
            #app.inGadgetShop=True
        #elif mouse is within jetpackSkinShopIcon
            #app.inShop=False
            #app.inJetpackSkinShop=True
    elif app.inGadgetShop==True:
        pass
    elif app.inJetpackSkinShop==True:
        pass
    else:
        pass
        #when app.playingScreen==True

def onStep(app):
    if app.playing:
        app.steps+=1
        #app.playingScreen to the left and loop image
        #if app.steps%something
            #addzapper to ZapperList
    else:
        app.steps=0

def redrawAll(app):
    drawBoard(app)
    drawZapper(app,5,0,2)

#Obstacles***
#angles: 0=horizontal,1=45 degrees, 2=vertical, 3=135 degrees
#pixels: in range of 1/2? of app.rows--longer zappers are less likely?
def drawZapper(app,pixels,angle,heightRow):
    col=(app.cols*2)//3
    if angle==0:
        for i in range (pixels):
            app.board[heightRow][col]='yellow'
            col+=1

#FROM CMU CS ACADEMY
def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            drawCell(app, row, col, color)

def drawCell(app, row, col,color):
    cellLeft, cellTop = getCellLeftTop(app, row, col)
    cellWidth, cellHeight = getCellSize(app)
    drawRect(cellLeft, cellTop, cellWidth, cellHeight,
             fill=color, border='black',
             borderWidth=app.cellBorderWidth)

def getCell(app, x, y):
    dx = x - app.boardLeft
    dy = y - app.boardTop
    cellWidth, cellHeight = getCellSize(app)
    row = math.floor(dy / cellHeight)
    col = math.floor(dx / cellWidth)
    if (0 <= row < app.rows) and (0 <= col < app.cols):
      return (row, col)
    else:
      return None

def getCellLeftTop(app, row, col):
    cellWidth, cellHeight = getCellSize(app)
    cellLeft = app.boardLeft + col * cellWidth
    cellTop = app.boardTop + row * cellHeight
    return (cellLeft, cellTop)

def getCellSize(app):
    cellWidth = app.boardWidth / app.cols
    cellHeight = app.boardHeight / app.rows
    return (cellWidth, cellHeight)

def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            color = app.board[row][col]
            drawCell(app, row, col,color)

def main():
    runApp()

if __name__=='__main__':
    main()