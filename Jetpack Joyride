from cmu_graphics import *
import math,copy
#from PIL import Image
#import os, pathlib

##scaffolding for game function
def onAppStart(app):
    app.BestDistance=0
    app.distance=0
    app.totalCoins=0
    app.gameOver=False
    app.inMenus=True
    #app.menuScreen=image
    app.inShop=False
    #app.shopScreen=image
    app.inGadgetShop=False
    #app.gadgetScreen=image
    app.inJetpackSkinShop=False
    #app.jetpackSkinScreen=image
    app.playing=False
    #app.playingScreen=image
    app.stepsPerSecond=1
    app.width=400
    app.height=440
    app.boardWidth=800
    app.boardHeight=400
    app.rows=app.boardHeight//20
    app.cols=app.boardWidth//20
    app.boardLeft=0
    app.boardTop=20
    app.cellBorderWidth=2
    app.steps=0
    #zapperList=[]

def onMousePress(app,mouseX,mouseY):
    if app.inMenus==True:
        pass
        #if mouse is within shopIcon
            #app.inMenus=False
            #app.inShop=True
        #elif mouse is within playGameIcon
            #app.inMenus=False
            #app.playing=True
    elif app.inShop==True:
        pass
        #if mouse is withing gadgetShopIcon
            #app.inShop=False
            #app.inGadgetShop=True
        #elif mouse is within jetpackSkinShopIcon
            #app.inShop=False
            #app.inJetpackSkinShop=True
    elif app.inGadgetShop==True:
        pass
    elif app.inJetpackSkinShop==True:
        pass
    else:
        pass
        #when app.playingScreen==True

def onStep(app):
    if app.playing:
        app.steps+=1
        #app.playingScreen to the left and loop image
        #if app.steps%something
            #addzapper to ZapperList
    else:
        app.steps=0

def redrawAll(app):
    drawBoard(app)

#Obstacles***
#angles: 0=horizontal,1=45 degrees, 2=vertical, 3=135 degrees
#pixels:
def drawZapper(pixels,angle):


#FROM CMU CS ACADEMY
def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            drawCell(app, row, col)

def drawCell(app, row, col):
    cellLeft, cellTop = getCellLeftTop(app, row, col)
    cellWidth, cellHeight = getCellSize(app)
    drawRect(cellLeft, cellTop, cellWidth, cellHeight,
             fill=None, border='black',
             borderWidth=app.cellBorderWidth)

def getCellLeftTop(app, row, col):
    cellWidth, cellHeight = getCellSize(app)
    cellLeft = app.boardLeft + col * cellWidth
    cellTop = app.boardTop + row * cellHeight
    return (cellLeft, cellTop)

def getCellSize(app):
    cellWidth = app.boardWidth / app.cols
    cellHeight = app.boardHeight / app.rows
    return (cellWidth, cellHeight)

def main():
    runApp()

if __name__=='__main__':
    main()