from cmu_graphics import *
import math,copy
import random

def onAppStart(app):
    app.BestDistance=0
    app.distance=0
    app.bestDistance=0
    app.totalCoins=0
    app.coinAdder=1
    app.thisGameCoins=0
    app.gameOver=False
    app.inMenus=False
    app.playing=True
    app.stepsPerSecond=10
    app.width=900
    app.divisor=30
    app.height=(app.width//2)
    app.boardWidth=(app.width*4)//3
    app.boardHeight=(app.height*9)//10
    app.rows=app.boardHeight//app.divisor
    app.cols=app.boardWidth//app.divisor
    app.boardLeft=0
    app.boardTop=(app.height-app.boardHeight)//2
    app.cellBorderWidth=2
    app.board=[([None]*app.cols) for row in range(app.rows)]
    app.steps=0
    app.zapperList=[zapper(app,7,1,4,5)]
    app.missileList=[]
    app.laserList=[]
    app.playerCx=(app.boardWidth//app.cols)*4
    app.playerCy=app.boardTop+(app.boardHeight-(app.boardHeight//app.rows))
    app.playerRadius=(((app.boardHeight//app.rows)*2)//3)
    app.magnetism=gadgetButton((app.width/2),70,0,magnetismGadgetToggle)
    app.doubleCoins=gadgetButton((app.width/2)+(app.width/8),70,0,doubleCoinsGadgetToggle)
    app.gadgetButtonList=[app.magnetism,app.doubleCoins]
    app.selectedGadget=None
    app.dy=0
    app.d2y=2
    app.boosting=False
    app.grounded=True
    app.ceilinged=False
    app.coinRadius=10
    app.coinCollectRadius=app.playerRadius
    app.allCoinsList=[]
    app.gameOver=False
    app.playGameButtonX=(app.width*3)/5
    app.playGameButtonY=(app.height*3)/4
    app.playGameButtonWidth=app.width/3
    app.playGameButtonHeight=app.height/6
    app.zappersOn=True
    app.missilesOn=False
    app.lasersOn=False
    app.coinsOn=True
    app.zapped=False
    app.burnt=False

    ##IMAGES
    ##https://static.wikia.nocookie.net/jetpackjoyride/images/0/01/BarryFullSpriteSheet.png/revision/latest/scale-to-width-down/250?cb=20210603110718
    ##https://express.adobe.com/sp/design/post/urn:aaid:sc:VA6C2:896e421d-5470-4fd2-b5d6-cb0ad68cb17a?workflow=quicktask&qId=remove-background&actionLocation=seo&autoDownload=true
    ##(adobeExpress to remove background)
    ##BARRY SPRITESHEET
    app.characterSpriteSheet='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/B5BE4421-A864-45FB-9963-808F7BBB49FD_adobe_express.png'
    app.characterImage1='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/characterImage1.png'
    app.characterImage2='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/characterImage2.png'
    app.characterImage3='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/characterImage3.png'
    app.characterImage4='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/characterImage4.png'
    app.characterImages=[app.characterImage1,app.characterImage2,app.characterImage3,app.characterImage4]
    app.characterImageIndex=0
    app.characterImage=app.characterImage1
    app.characterBoostImage='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/characterBoostImage.png'
    app.zapped1='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/zapped1.png'
    app.zapped2='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/zapped2.png'
    app.burnt1='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/burnt1.png'
    app.burnt2='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/burnt2.png'
    app.ded='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/ded.png'
    ##missiles
    ##https://static.wikia.nocookie.net/jetpackjoyride/images/4/42/MissileJammer.png/revision/latest/thumbnail/width/360/height/360?cb=20120428044536
    app.fastRedMissile='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/fastRedMissile.png'
    ##https://static.wikia.nocookie.net/jetpackjoyride/images/9/94/EzyDodgeMissiles.png/revision/latest/thumbnail/width/360/height/360?cb=20120428172654
    app.slowBlueMissile='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/slowBlueMissile.png'
    ##https://static.wikia.nocookie.net/jetpackjoyride/images/5/51/About_to_come.png/revision/latest?cb=20120503044614
    app.redMissileWarning='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/redMissileWarning.png'
    app.blueMissileWarning='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/blueMissileWarning.png'
    ##lasers
    ##https://static.wikia.nocookie.net/jetpackjoyride/images/d/d7/Fires_laser.png/revision/latest?cb=20120511034357
    app.laserEnd='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/laserEnd.png'
    ##https://i.imgur.com/zAtRU1W.jpg
    app.laserWarning='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/laserWarning.png'
    ##https://cdn.mobygames.com/screenshots/16820647-jetpack-joyride-ipad-beware-of-flashing-lasers.png
    app.laserActive='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/laserActive.png'
    ##zappers
    ##https://i0.wp.com/www.androidpure.com/wp-content/uploads/2015/07/Jetpack-Joyride-New-Zappers-e1436600208357.png
    app.zapperPiece='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/zapperPiece.png'
    ##https://static.wikia.nocookie.net/jetpackjoyride/images/a/ad/Dezapinator.PNG/revision/latest/thumbnail/width/360/height/360?cb=20120526011759
    app.zapperEnd='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/zapperEnd.png'
    ##coins
    ##https://wikoles.net/uploads/posts/2022-09/jetpack-joyride-1.webp
    app.coinImage='/Users/patlucas/Desktop/15-112/15-112-Term-Project-1/coin.png'

def onKeyPress(app,key):
    if app.playing and not app.gameOver:
        if key=='space':
            app.grounded=False
            app.boosting=True

def onKeyRelease(app,key):
    if app.playing and not app.gameOver:
        if key=='space':
            app.ceilinged=False
            app.boosting=False

def onMousePress(app,mouseX,mouseY):
    if app.inMenus:
        if pressInPlayGame(app,mouseX,mouseY):
            app.gameOver=False
            app.inMenus=False
            app.playing=True
        else:
            for gadgetButton in app.gadgetButtonList:
                gadgetButton.checkForPress(app,mouseX,mouseY)

def onStep(app):
    if app.playing:
        if app.gameOver:
            app.boosting=False
            if (app.stepsPerSecond>1):
                if app.grounded:
                    app.stepsPerSecond/=1.3
            else:
                app.playing=False
        cycleCharacterGraphic(app)
        checkCollisions(app)
        keepPlayerInBounds(app)
        movePlayer(app)
        moveObjects(app)
        #app.playingScreen to the left and loop image
        addObjects(app)
        app.distance+=1
        app.steps+=1
        if app.steps%50==0:
            app.stepsPerSecond+=0.2
    else:
        app.stepsPerSecond=10
        if app.distance>=app.bestDistance:
            app.bestDistance=app.distance
        app.distance=0
        app.steps=0
        app.totalCoins+=app.thisGameCoins
        app.thisGameCoins=0
        app.zapperList=[]
        app.missileList=[]
        app.laserList=[]
        app.coinList=[]
        app.board=[([None]*app.cols) for row in range(app.rows)]
        app.zapped=False
        app.burnt=False
        app.zappersOn=True
        app.missilesOn=False
        app.lasersOn=False
        app.coinsOn=True
        app.inMenus=True

def cycleCharacterGraphic(app):
    if not app.gameOver:
        if app.grounded:
            app.characterImageIndex=(app.characterImageIndex+1)%4
            app.characterImage=app.characterImages[app.characterImageIndex]
        else:
            app.characterImage=app.characterBoostImage
    else:
        if not app.grounded:
            if app.zapped:
                if app.steps%2!=0:
                    app.characterImage=app.zapped1
                else:
                    app.characterImage=app.zapped2
            elif app.burnt:
                if app.steps%2!=0:
                    app.characterImage=app.burnt1
                else:
                    app.characterImage=app.burnt2
        else:
            app.characterImage=app.ded

def checkCollisions(app):
    cellWidth,cellHeight=getCellSize(app)
    for row in range(app.rows):
            for col in range(app.cols):
                cellLeft,cellTop=getCellLeftTop(app,row,col)
                if ((app.board[row][col]!=None) and 
                    (distance(app.playerCx,app.playerCy,
                    cellLeft+(0.5*cellWidth),cellTop+(0.5*cellHeight))<
                    app.playerRadius+(0.5*cellWidth))):
                    app.gameOver=True
                    app.zapped=True
    for missile in app.missileList:
        if (distance(app.playerCx,app.playerCy,missile.posX,missile.height)<
            app.playerRadius+missile.radius):
            app.gameOver=True
            app.burnt=True
    for laser in app.laserList:
        if (((abs(laser.height-app.playerCy)<=app.playerRadius)or
            (abs(app.playerCy-(laser.height+cellHeight))<=app.playerRadius))
            and(laser.activated)):
            app.gameOver=True 
            app.burnt=True
    for coinList in app.allCoinsList:
        for coin in coinList:
            if (distance(app.playerCx,app.playerCy,coin.x,coin.y)<=
                app.coinCollectRadius+app.coinRadius and (coin.coinFill=='gold')):
                coin.coinFill=None
                app.thisGameCoins+=app.coinAdder

def keepPlayerInBounds(app):
    if (app.playerCy+app.playerRadius+app.dy>app.boardTop+app.boardHeight):
        app.dy=0
        app.playerCy=app.boardTop+app.boardHeight-(app.playerRadius)
        app.grounded=True
    elif (app.playerCy-app.playerRadius+app.dy<app.boardTop):
        app.dy=0
        app.playerCy=app.boardTop+app.playerRadius
        app.ceilinged=True

def movePlayer(app):
    if app.boosting:
        if ((not app.ceilinged)and(app.dy>-30)):
            app.dy-=app.d2y
    else:
        if ((not app.grounded)and(app.dy<30)):
            app.dy+=app.d2y
    app.playerCy+=app.dy

def moveObjects(app):
    cellWidth,cellHeight=getCellSize(app)
    for zapper in app.zapperList:
        zapper.x1-=cellWidth
        zapper.x2-=cellWidth
        zapper.col-=1
    for zapper in app.zapperList:
        if (zapper.col+zapper.pixels<0):
            app.zapperList.remove(zapper)
    for missile in app.missileList:
        if (app.steps-missile.time<40):
                missile.height=app.playerCy
        else:
            missile.activated=True
            if missile.type==1:
                if missile.posX>=(app.width//2):
                    missile.height=app.playerCy
            missile.posX-=missile.speed
    for missile in app.missileList:
        if (missile.posX+missile.radius<0):
            app.missileList.remove(missile)
    for laser in app.laserList:
        if ((laser.height<app.boardTop) or 
            (laser.height+cellHeight>app.boardTop+app.boardHeight)):
            laser.moving=-laser.moving
        laser.height+=4*laser.moving
    for laser in app.laserList:        
        if ((app.steps-laser.time)>40):
            laser.activated=True
        else:
            laser.activated=False
    for laser in app.laserList:
        if (app.steps-laser.time>80):
            app.laserList.remove(laser)
    for coinList in app.allCoinsList:
        for coin in coinList:
            coin.x-=cellWidth
    for coinList in app.allCoinsList:
        if coinList==[]:
            app.allCoinsList.remove(coinList)
        else:
            for coin in coinList:
                if coin.x<0:
                    coinList.remove(coin)

def addObjects(app):
    if app.steps>1:
        if app.steps%500==0:
            app.lasersOn=(not app.lasersOn) 
            addLaser(app)
        else:
            if app.steps%100==0:
                if random.randrange(6)==5:
                    app.zappersOn=False
                else:
                    app.zappersOn=True
        if app.lasersOn:
            app.zappersOn=False
            app.missilesOn=False
            if ((app.steps%(1000//app.stepsPerSecond)==0) and (app.steps%1000!=0)):
                addLaser(app)
        else:
            if app.steps%1000!=0:
                if app.zappersOn:
                    if (app.steps%50==0 and (app.steps%500!=0)):
                        addZapper(app)
                    if app.steps%100==0 and (app.steps%500!=0):
                        addMissile(app)
                else:
                    if (app.steps%20==0 and (app.steps%500!=0)):
                        addMissile(app)
        if app.coinsOn:
            if app.steps%50==0:
                addCoinList(app)

def redrawAll(app):
    if app.playing:
        if app.gameOver:
            drawLabel('GAME OVER',app.width/2,app.height/3,size=40,fill='red')
        drawBoard(app)
        # drawPlayerHitbox(app)
        drawObjects(app)
        drawLabel(f'{app.distance} M',30,10,size=20,bold=True)
        drawLabel(f'{app.thisGameCoins}',app.width-30,10,size=17,bold=True)
        drawCoinGraphic(app)
        drawZapperGraphic(app)
        drawMissileGraphic(app)
        drawLaserGraphic(app)
        drawCharacterGraphic(app)
    elif app.inMenus:
        drawMenuLabels(app)
        drawRect(app.playGameButtonX,app.playGameButtonY,
        app.playGameButtonWidth,app.playGameButtonHeight,fill=None,border='black')
        for gadgetButton in app.gadgetButtonList:
            gadgetButton.drawButton(app)

def drawCoinGraphic(app):
    for coinList in app.allCoinsList:
        for coin in coinList:     
            if coin.coinFill!=None:   
                drawImage(app.coinImage,coin.x,coin.y,
                width=app.coinRadius*2,height=app.coinRadius*2,align='center')

def drawCharacterGraphic(app):
    #drawImage(app.characterSpriteSheet,0,0)
    drawImage(app.characterImage,app.playerCx,app.playerCy,
              width=app.playerRadius*3,height=app.playerRadius*3,align='center')

def drawMissileGraphic(app):
    for missile in app.missileList:
        if missile.type==0:
            if not missile.activated:
                drawImage(app.redMissileWarning,app.width-missile.radius-5,
                app.playerCy-2,width=missile.radius*2.5,height=missile.radius*2.5,align='center')
            else:
                drawImage(app.fastRedMissile,missile.posX,missile.height,
                width=missile.radius*4,height=missile.radius*4.25,align='center')
        else:
            if not missile.activated:
                drawImage(app.blueMissileWarning,app.width-missile.radius-5,
                app.playerCy,width=missile.radius*2.5,height=missile.radius*2.5,align='center')
            else:
                drawImage(app.slowBlueMissile,missile.posX,missile.height+2,
                width=missile.radius*4,height=missile.radius*4.5,align='center')

def drawLaserGraphic(app):
    cellWidth, cellHeight = getCellSize(app)
    for laser in app.laserList:
        drawImage(app.laserEnd,0,laser.height,width=cellWidth,
                  height=cellHeight)
        drawImage(app.laserEnd,app.width,laser.height,width=cellWidth,
                  height=cellHeight,rotateAngle=180,align='right-top')
        if not laser.activated:
            drawImage(app.laserWarning,cellWidth,laser.height+(cellHeight/2)-2,
                    width=app.width-(2*cellWidth),height=4)
        else:
            drawImage(app.laserActive,cellWidth,laser.height,
                    width=app.width-(2*cellWidth),height=cellHeight)

def drawZapperGraphic(app):
    if app.zapperList!=[]:
        cellWidth, cellHeight = getCellSize(app)
        for zapper in app.zapperList:
            if zapper.angle==0:
                angle=0
                mult=2
            elif zapper.angle==1:
                angle=-45
                mult=3
            elif zapper.angle==2:
                angle=90
                mult=2
            else:
                angle=45
                mult=3
            print(zapper.x1,zapper.y1,zapper.x2,zapper.y2)
            print(zapper.heightRow,zapper.col)
            drawImage(app.zapperEnd,zapper.x1,zapper.y1,align='center',
                    rotateAngle=angle+180,width=cellWidth*mult,height=cellHeight*mult)
            drawImage(app.zapperEnd,zapper.x2,zapper.y2,align='center',
                    rotateAngle=angle,width=cellWidth*mult,height=cellHeight*mult)
        #     cellLeft,cellTop=getCellLeftTop(app, zapper.heightRow, zapper.col)
        #     sideLength=zapper.pixels*cellWidth
        #     x1=cellLeft+(cellWidth/2)
        #     y1=cellTop+(cellHeight/2)
        #     if zapper.angle==0:
        #         angle=0
        #         length=sideLength
        #         x2=cellLeft+length-(cellWidth/2)
        #         y2=cellTop+(cellHeight/2)
        #         mult=1
        #     elif zapper.angle==1:
        #         angle=-45
        #         y1+=2*cellHeight
        #         length=sideLength*(2**0.5)
        #         x2=cellLeft+sideLength-(cellWidth/2)
        #         y2=cellTop-sideLength+(3.25*cellHeight)
        #         mult=1.25
        #     elif zapper.angle==2:
        #         angle=90
        #         length=sideLength
        #         x2=cellLeft+(cellWidth/2)
        #         y2=cellTop+length-(cellWidth/4)
        #         mult=1
        #     else:
        #         angle=45
        #         length=sideLength*(2**0.5)
        #         x2=cellLeft+sideLength-(cellWidth/2)
        #         y2=cellTop+sideLength-(cellHeight/4)
        #         mult=1.25   
        #drawImage(app.zapperPiece,cellLeft+cellWidth,cellTop,
                #rotateAngle=angle,width=length-(2*cellWidth),
                #height=cellHeight*2.25)
        # drawImage(app.zapperEnd,zapper.x1,zapper.y1,rotateAngle=angle+180,
        #         width=cellWidth*2*mult,height=cellHeight*2*mult,align='center')
        # drawImage(app.zapperEnd,x2,y2,rotateAngle=angle,
        #         width=cellWidth*2*mult,height=cellHeight*2*mult,align='center')

def drawMenuLabels(app):
    drawLabel('GADGETS',(app.width*3)/4,40,size=30)
    drawLabel('JETPACKS',(app.width*3)/4,(app.height/2)-40,size=30)
    drawLabel('PLAY AGAIN',(app.width*9)/10,(app.height*5)/6,
    size=40,bold=True,align='right')
    drawLabel(f'COINS: {app.totalCoins}',50,40,size=20,align='left')
    drawLabel(f'BEST DISTANCE: {app.bestDistance}M',50,70,size=20,align='left')

def drawObjects(app):
    for zapper in app.zapperList:
        zapper.drawZapper(app)
    for missile in app.missileList:
        if not missile.activated:
            missile.drawMissileWarning(app)
        else:
            missile.drawMissile()
    for laser in app.laserList:
        laser.drawLaser(app)
    for coinList in app.allCoinsList:
        for coin in coinList:
            coin.drawCoin(app)          


#Obstacles***
#angles: 0=horizontal,1=45 degrees, 2=vertical, 3=135 degrees
#pixels: in range of (2*app.rows)//3? of app.rows--longer zappers are less likely?
#zappers
class zapper:
    def __init__(self,app,pixels,angle,heightRow,col):
        cellWidth,cellHeight=getCellSize(app)
        self.pixels=pixels
        self.angle=angle
        self.heightRow=heightRow
        self.col=col
        self.x1,self.y1=getCellLeftTop(app,self.heightRow,self.col)
        self.x1+=(cellWidth*3/2)
        self.y1+=(cellWidth/2)
        heightRow=self.heightRow
        if self.angle==0:
            self.x2=self.x1+((self.pixels-1)*cellWidth)
            self.y2=self.y1
        elif self.angle==1:
            self.x2=self.x1+((self.pixels-1)*cellWidth)
            self.y2=self.y1-((self.pixels-1)*cellHeight)
            while ((heightRow-self.pixels)<-1):
                heightRow+=1
                self.y1+=cellHeight
                self.y2+=cellHeight
                self.heightRow+=1
        elif self.angle==2:
            self.x2=self.x1
            self.y2=self.y1+((self.pixels-1)*cellHeight)
            while ((heightRow+self.pixels)>app.rows):
                heightRow-=1
                self.y1-=cellHeight
                self.y2-=cellHeight
                self.heightRow-=1
        else:
            self.x2=self.x1+((self.pixels-1)*cellWidth)
            self.y2=self.y1+((self.pixels-1)*cellHeight)
            while ((heightRow+self.pixels)>app.rows):
                heightRow-=1
                self.y1-=cellHeight
                self.y2-=cellHeight
                self.heightRow-=1
    def __repr__(self):
        return f'col:{self.col},{self.pixels} pixels'
    def drawZapper(self,app):
        cellWidth, cellHeight = getCellSize(app)
        drawCircle(self.x1,self.y1,5)
        drawCircle(self.x2,self.y2,5)
        heightRow=self.heightRow
        col=self.col
        if self.angle==0:
            for i in range (self.pixels):
                app.board[heightRow][col]='yellow'
                col+=1
            if(app.board[heightRow][col]=='yellow'):
                app.board[heightRow][col]=None
        elif self.angle==1:
            for i in range(self.pixels):
                app.board[heightRow][col]='yellow'
                if(app.board[heightRow][col+1]=='yellow'):
                    app.board[heightRow][col+1]=None
                heightRow-=1
                col+=1
        elif self.angle==2:
            for i in range(self.pixels):
                app.board[heightRow][col]='yellow'
                if(app.board[heightRow][col+1]=='yellow'):
                    app.board[heightRow][col+1]=None
                heightRow+=1
        elif self.angle==3:
            for i in range(self.pixels):
                app.board[heightRow][col]='yellow'
                if(app.board[heightRow][col+1]=='yellow'):
                    app.board[heightRow][col+1]=None
                heightRow+=1
                col+=1

def addZapper(app):
    randPixels=random.randrange(3,((app.rows)//2)+1)
    randAngle=random.randrange(4)
    randRowHeight=random.randrange(app.rows)
    initialCol=((app.cols*3)//4)
    app.zapperList.append(zapper(app,randPixels,randAngle,randRowHeight,initialCol))
##missiles
##0=small&fast,1=large&slow
class missile:
    def __init__(self,app,type,time,height,posX):
        self.type=type
        self.time=time
        self.height=height
        self.posX=posX
        self.radius=10*type+20
        self.speed=(app.stepsPerSecond*3)/(type+1)
        self.activated=False
    def drawMissileWarning(self,app):
        drawCircle(app.width-self.radius-5,app.playerCy,self.radius,fill=None,border='red')
    def drawMissile(self):
        drawCircle(self.posX,self.height,self.radius,fill='red')
  
def addMissile(app):
    randType=random.randrange(2)
    app.missileList.append(missile(app,randType,app.steps,app.playerCy,app.width+50))
##lasers
##moving:0=not moving,-1=up,1=down
class laser:
    def __init__(self,height,time,moving):
        self.height=height
        self.moving=moving
        self.time=time
        self.activated=False
    def drawLaser(self,app):
        cellHeight=app.boardHeight//app.rows
        if self.activated:
            laserOpacity=30
        else:
            laserOpacity=10
        drawRect(0,self.height,app.boardWidth,cellHeight,fill='red',opacity=laserOpacity)
  
def addLaser(app):
    cellHeight=app.boardHeight//app.rows
    randomHeight=(random.randrange(app.rows)*cellHeight)+app.boardTop
    #change this to make it less frequent for moving lasers
    randomDirection=random.randrange(2)
    if randomDirection==0:
        randomDirection=-1
    app.laserList.append(laser(randomHeight,app.steps,randomDirection))

##coins
class coin:
    def __init__(self,x,y):
        self.x=x
        self.y=y
        self.coinFill='gold'
    def drawCoin(self,app):
        drawCircle(self.x,self.y,app.coinRadius,fill=self.coinFill)

def addCoinList(app):
    coinHeight=random.randrange(app.boardTop+app.coinRadius,app.boardTop+app.boardHeight)
    coinCols=random.randrange(11)
    coinRows=random.randrange(4)
    while (coinHeight+(app.coinRadius*2*coinRows)>
           app.boardTop+app.boardHeight):
        coinHeight-=1
    firstCoinX=app.width+app.coinRadius
    firstCoinY=coinHeight
    coinList=[]
    for row in range(coinRows):
        for col in range(coinCols):
            coinList.append(coin(firstCoinX+(col*app.coinRadius*2)+5,
            coinHeight+(row*app.coinRadius*2)+5))
    app.allCoinsList.append(coinList)

##player
def drawPlayerHitbox(app):
    drawCircle(app.playerCx,app.playerCy,app.playerRadius,border='black',fill=None)

#buttons
#def buttonFunction
#class Button
#def __init__(self,buttonFunciton)
#def checkForPress(self,app,mouseX,mouseY):
    #if in the parameters
        #call self.buttonFunction(app)
#app.myButton=(self,buttonFunction)

class gadgetButton:
    def __init__(self,x,y,price,buttonFunction):
        self.x=x
        self.y=y
        self.price=price
        self.width=80
        self.height=80
        self.buttonFunction=buttonFunction
        self.unlocked=False
        self.activated=False
    def __eq__(self,other):
        if isinstance(other,gadgetButton)and self.buttonFunction==other.buttonFunction:
            return True
        else:
            return False
    def drawButton(self,app):
        if self.unlocked:
            buttonFill=None
        else:
            buttonFill='lightGrey'
        if app.selectedGadget==self:
            buttonBorder='green'
        else:
            buttonBorder='red'
        drawRect(self.x,self.y,self.width,self.height,fill=buttonFill,border=buttonBorder)
    def checkForPress(self,app,mouseX,mouseY):
        if ((self.x<=mouseX<=self.x+self.width)and
            (self.y<=mouseY<=self.y+self.height)):
            if (app.totalCoins>=self.price and self.unlocked!=True):
                self.unlocked=True
                app.totalCoins-=self.price
            if (self.unlocked and app.selectedGadget!=self):
                app.selectedGadget=self
                self.activated=True
            else:
                app.selectedGadget=None   
                self.activated=False
        self.buttonFunction(app,self.activated)

def magnetismGadgetToggle(app,activated):
    if activated:
        app.coinCollectRadius=app.playerRadius+50
    else:
        app.coinCollectRadius=app.playerRadius

def doubleCoinsGadgetToggle(app,activated):
    if activated:
        app.coinAdder=2
    else:
        app.coinAdder=1

def pressInPlayGame(app,mouseX,mouseY):
    if((app.playGameButtonX<=mouseX<=app.playGameButtonX+
        app.playGameButtonWidth)and(app.playGameButtonY<=mouseY<=
        app.playGameButtonY+app.playGameButtonHeight)):
        return True
    else:
        return False


#FROM CMU CS ACADEMY
def distance(x0, y0, x1, y1):
    return ((x1 - x0)**2 + (y1 - y0)**2)**0.5

def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            color = app.board[row][col]
            drawCell(app, row, col, color)

def drawCell(app, row, col, color):
    cellLeft, cellTop = getCellLeftTop(app, row, col)
    cellWidth, cellHeight = getCellSize(app)
    drawRect(cellLeft, cellTop, cellWidth, cellHeight,
             fill=color, border='lightGrey',
             borderWidth=app.cellBorderWidth)

def getCell(app, x, y):
    dx = x - app.boardLeft
    dy = y - app.boardTop
    cellWidth, cellHeight = getCellSize(app)
    row = math.floor(dy / cellHeight)
    col = math.floor(dx / cellWidth)
    if (0 <= row < app.rows) and (0 <= col < app.cols):
      return (row, col)
    else:
      return None

def getCellLeftTop(app, row, col):
    cellWidth, cellHeight = getCellSize(app)
    cellLeft = app.boardLeft + col * cellWidth
    cellTop = app.boardTop + row * cellHeight
    return (cellLeft, cellTop)

def getCellSize(app):
    cellWidth = app.boardWidth / app.cols
    cellHeight = app.boardHeight / app.rows
    return (cellWidth, cellHeight)

def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            color = app.board[row][col]
            drawCell(app, row, col,color)

def main():
    runApp()

if __name__=='__main__':
    main()

